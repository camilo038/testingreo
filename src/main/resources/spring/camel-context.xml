<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:ctx="http://www.springframework.org/schema/context"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring        http://camel.apache.org/schema/spring/camel-spring.xsd  http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.8.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" id="jsonProvider"/>
    <bean class="co.com.test.exceptions.ErrorExcepcionInterceptor" id="ErrorExcepcionInterceptor"/>
    <bean class="co.com.test.processor.RespuestaErrorProcessor" id="respuestaErrorProcessor"/>
    <camel:errorHandler id="noErrorHandler" type="NoErrorHandler"/>
    <bean class="org.slf4j.LoggerFactory" factory-method="getLogger" id="rh1">
        <constructor-arg index="0" value="rh1"/>
    </bean>
    <bean class="co.com.test.QuickstartConfiguration" id="prop"/>
    <ctx:property-placeholder location="classpath:application.properties"/>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSource">
        <property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
        <property name="url" value="${quickstart.jdbcConnection_Sql}"/>
        <property name="username" value="${quickstart.jdbcUserName_Sql}"/>
        <property name="password" value="${quickstart.jdbcPassword_Sql}"/>
        <property name="testOnBorrow" value="true"/>
    </bean>
    <cxf:rsServer address="{{quickstart.endpoint_TESTPRUEBA_Path}}"
        id="restApiEnpoint" serviceClass="co.com.test.client.Client">
        <cxf:providers>
            <ref bean="jsonProvider"/>
        </cxf:providers>
        <cxf:outInterceptors>
            <ref bean="ErrorExcepcionInterceptor"/>
        </cxf:outInterceptors>
    </cxf:rsServer>
    <camelContext id="CXF-SERVICE-SALDOPAGOS-API" streamCache="true"
        threadNamePattern="100" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="properties" location="classpath:application.properties"/>
        <threadPoolProfile defaultProfile="true" id="changedProfile"
            maxQueueSize="100" poolSize="1"/>
        <dataFormats>
            <xmljson id="xmljsonList"/>
            <json id="serializer" library="Jackson" prettyPrint="true"/>
            <xmljson id="xmljson"/>
            <xmljson arrayName="tes" elementName="list"
                expandableProperties="false" forceTopLevelObject="true"
                id="xmljsonWithOptions" removeNamespacePrefixes="true"
                rootName="test" skipNamespaces="true" trimSpaces="true"/>
        </dataFormats>
        <redeliveryPolicyProfile id="redeliveryPolicy"
            logRetryAttempted="true" maximumRedeliveries="0"
            redeliveryDelay="10" retriesExhaustedLogLevel="WARN"/>
        <onException id="CustomExceptionHandling"
            redeliveryPolicyRef="redeliveryPolicy" useOriginalMessage="true">
            <exception>org.apache.camel.component.bean.validator.BeanValidationException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggerRef="rh1" loggingLevel="ERROR" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS}} || ${exception.message}"/>
            <log loggerRef="rh1" loggingLevel="DEBUG" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.stacktrace}"/>
            <setHeader headerName="trazaerror">
                <simple>${exception.stacktrace}</simple>
            </setHeader>
            <setProperty propertyName="exceptionMessage">
                <simple>${exception.message}</simple>
            </setProperty>
            <setProperty propertyName="codigohttp">
                <simple>{{quickstart.codigoRespuesta_ErrorGeneral}}</simple>
            </setProperty>
            <setProperty propertyName="codigo">
                <simple>{{quickstart.codigo_ErrorEstructura}}</simple>
            </setProperty>
            <setProperty propertyName="descripcion">
                <simple>{{quickstart.descripcion_ErrorEstructura}}</simple>
            </setProperty>
            <marshal>
                <json library="Jackson"/>
            </marshal>
            <convertBodyTo type="String"/>
            <setProperty propertyName="RequestBody">
                <simple>${body}</simple>
            </setProperty>
            <bean method="process" ref="respuestaErrorProcessor"/>
            <setProperty propertyName="nombreProyecto">
                <simple>{{camel.springboot.name}}</simple>
            </setProperty>
            <setProperty propertyName="fechaSistema">
                <simple>${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS}</simple>
            </setProperty>
            <to uri="velocity:template/ResponseBroker.vm"/>
            <stop/>
        </onException>
        <onException id="CustomExceptionHandling"
            redeliveryPolicyRef="redeliveryPolicy" useOriginalMessage="true">
            <exception>co.com.test.exceptions.ProcedureExcepcion</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggerRef="rh1" loggingLevel="ERROR" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS}} || ${exception.message}"/>
            <log loggerRef="rh1" loggingLevel="DEBUG" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.stacktrace}"/>
            <setHeader headerName="trazaerror">
                <simple>${exception.stacktrace}</simple>
            </setHeader>
            <setProperty propertyName="codigohttp">
                <simple>{{quickstart.codigoRespuesta_ErrorGeneral}}</simple>
            </setProperty>
            <setProperty propertyName="codigo">
                <simple>{{quickstart.codigo_ErrorProcedure}}</simple>
            </setProperty>
            <setProperty propertyName="descripcion">
                <simple>{{quickstart.descripcion_ErrorProcedure}}</simple>
            </setProperty>
            <bean method="process" ref="respuestaErrorProcessor"/>
            <stop/>
        </onException>
        <onException id="CustomExceptionHandling"	
            redeliveryPolicyRef="redeliveryPolicy" useOriginalMessage="true">
            <exception>com.microsoft.sqlserver.jdbc.SQLServerException</exception>
            <exception>java.sql.SQLRecoverableException</exception>
            <exception>org.springframework.jdbc.CannotGetJdbcConnectionException</exception>
            <exception>org.springframework.jdbc.BadSqlGrammarException</exception>
            <exception>com.jayway.jsonpath.PathNotFoundException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggerRef="rh1" loggingLevel="ERROR" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS}} || ${exception.message}"/>
            <log loggerRef="rh1" loggingLevel="DEBUG" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.stacktrace}"/>
            <setHeader headerName="trazaerror">
                <simple>${exception.stacktrace}</simple>
            </setHeader>
            <setProperty propertyName="exceptionMessage">
                <simple>${exception.message}</simple>
            </setProperty>
            <camel:setBody>
                <camel:simple>${property.exceptionMessage}</camel:simple>
            </camel:setBody>
            <camel:choice>
                <camel:when>
                    <simple>${body} contains 'No results'</simple>
                    <setProperty propertyName="exceptionMessage">
                        <simple>La consulta no arrojo resultados</simple>
                    </setProperty>
                </camel:when>
            </camel:choice>
            <setProperty propertyName="codigohttp">
                <simple>{{quickstart.codigoRespuesta_ErrorGeneral}}</simple>
            </setProperty>
            <setProperty propertyName="codigo">
                <simple>{{quickstart.codigo_Errorsql}}</simple>
            </setProperty>
            <setProperty propertyName="descripcion">
                <simple>{{quickstart.descripcion_ErrorEstructura}}</simple>
            </setProperty>
            <marshal>
                <json library="Jackson"/>
            </marshal>
            <convertBodyTo type="String"/>
            <setProperty propertyName="RequestBody">
                <simple>${body}</simple>
            </setProperty>
            <bean method="process" ref="respuestaErrorProcessor"/>
            <setProperty propertyName="nombreProyecto">
                <simple>{{camel.springboot.name}}</simple>
            </setProperty>
            <setProperty propertyName="fechaSistema">
                <simple>${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS}</simple>
            </setProperty>
            <to uri="velocity:template/ResponseBroker.vm"/>
            <stop/>
        </onException>
        <onException id="CustomExceptionHandling"
            redeliveryPolicyRef="redeliveryPolicy" useOriginalMessage="true">
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggerRef="rh1" loggingLevel="ERROR" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS}} || ${exception.message}"/>
            <log loggerRef="rh1" loggingLevel="DEBUG" message="ERROR: ${camelId} || ${routeId} || ${id} || ${date:now:yyyy-MM-dd'T'HH:mm:ss:SSS} || ${exception.stacktrace}"/>
            <setHeader headerName="trazaerror">
                <simple>${exception.stacktrace}</simple>
            </setHeader>
            <setProperty propertyName="codigohttp">
                <simple>{{quickstart.codigoRespuesta_ErrorGeneral}}</simple>
            </setProperty>
            <setProperty propertyName="codigo">
                <simple>{{quickstart.codigo_ErrorInterno}}</simple>
            </setProperty>
            <setProperty propertyName="descripcion">
                <simple>{{quickstart.descripcion_ErrorInterno}}</simple>
            </setProperty>
            <bean method="process" ref="respuestaErrorProcessor"/>
            <stop/>
        </onException>
        <route id="TESTPRUEBA-ROUTE-MAIN">
            <from id="_from1" uri="cxfrs:bean:restApiEnpoint?bindingStyle=SimpleConsumer"/>
            <to id="_to1" uri="bean-validator://x"/>
            <removeHeaders id="_removeHeaders1" pattern="CamelHttp*"/>
            <setHeader headerName="Content-Type" id="_setHeader1">
                <constant>application/json</constant>
            </setHeader>
            <toD id="_toD1" uri="direct:${header.operationName}"/>
        </route>
        <route id="CONSULTA-DATOS">
            <from id="_from3" uri="direct:consultarCliente"/>
            <setHeader headerName="customerID" id="_setHeader4">
                <simple>${body.customerID}</simple>
            </setHeader>
            <log id="_log2" loggerRef="rh1" message="Antes de consumir el DataSource"/>
            <to id="_to4" uri="sql-stored:classpath:sql/consultar.sql?dataSource=#dataSource"/>
            <marshal id="_marshal5" ref="serializer"/>
            <camel:setBody id="_setBody1">
                <jsonpath>$["#result-set-1"][0]</jsonpath>
            </camel:setBody>
            <log id="_log3" loggerRef="rh1" message="Despues de consumir el DataSource ${body}"/>
            <stop id="_stop1"/>
        </route>
        <route id="CREAR-DATOS">
            <from id="_from2" uri="direct:crearCliente"/>
            <setHeader headerName="firstName" id="_setHeader2">
                <simple>${body.firstName}</simple>
            </setHeader>
            <setHeader headerName="lastName" id="_setHeader3">
                <simple>${body.lastName}</simple>
            </setHeader>
            <setHeader headerName="email" id="_setHeader5">
                <simple>${body.email}</simple>
            </setHeader>
            <setHeader headerName="phoneNumber" id="_setHeader6">
                <simple>${body.phoneNumber}</simple>
            </setHeader>
            <log id="_log4" loggerRef="rh1" message="Antes de consumir el DataSource"/>
            <to id="_to2" uri="sql-stored:classpath:sql/crear.sql?dataSource=#dataSource"/>
            <camel:convertBodyTo id="_convertBodyTo1" type="String"/>
            <camel:choice id="_choice1">
                <camel:when id="_when1">
                    <simple>${body} contains 'update-count-1'</simple>
                    <camel:to id="_to3" uri="direct:response"/>
                </camel:when>
            </camel:choice>
            <log id="_log5" loggerRef="rh1" message="Despues de consumir el DataSource ${body}"/>
            <stop id="_stop3"/>
        </route>
        <route id="ACTUALIZAR-DATOS">
            <from id="_from2" uri="direct:actulizarCliente"/>
            <setHeader headerName="customerID" id="_setHeader7">
                <simple>${body.customerID}</simple>
            </setHeader>
            <setHeader headerName="firstName" id="_setHeader8">
                <simple>${body.firstName}</simple>
            </setHeader>
            <setHeader headerName="lastName" id="_setHeader9">
                <simple>${body.lastName}</simple>
            </setHeader>
            <setHeader headerName="email" id="_setHeader10">
                <simple>${body.email}</simple>
            </setHeader>
            <setHeader headerName="phoneNumber" id="_setHeader11">
                <simple>${body.phoneNumber}</simple>
            </setHeader>
            <log id="_log6" loggerRef="rh1" message="Antes de consumir el DataSource"/>
            <to id="_to5" uri="sql-stored:classpath:sql/actualizar.sql?dataSource=#dataSource"/>
            <camel:convertBodyTo id="_convertBodyTo2" type="String"/>
            <camel:choice id="_choice2">
                <camel:when id="_when2">
                    <simple>${body} contains 'update-count-1'</simple>
                    <camel:to id="_to7" uri="direct:response"/>
                </camel:when>
            </camel:choice>
            <log id="_log7" loggerRef="rh1" message="Despues de consumir el DataSource ${body}"/>
            <stop id="_stop4"/>
        </route>
        <route id="ELIMINAR-DATOS">
            <from id="_from4" uri="direct:eliminarCliente"/>
            <setHeader headerName="customerID" id="_setHeader12">
                <simple>${body.customerID}</simple>
            </setHeader>
            <log id="_log1" loggerRef="rh1" message="Antes de consumir el DataSource"/>
            <to id="_to6" uri="sql-stored:classpath:sql/eliminar.sql?dataSource=#dataSource"/>
            <camel:convertBodyTo id="_convertBodyTo3" type="String"/>
            <camel:choice id="_choice3">
                <camel:when id="_when3">
                    <simple>${body} contains 'update'</simple>
                    <camel:to id="_to8" uri="direct:response"/>
                </camel:when>
            </camel:choice>
            <log id="_log8" loggerRef="rh1" message="Despues de consumir el DataSource ${body}"/>
            <stop id="_stop2"/>
        </route>
        <route id="RT-RESPUESTA-CRUD">
            <from id="_from5" uri="direct:response"/>
            <to id="_to9" uri="velocity:template/response.vm"/>
            <log id="_log9" message="FINALZA RUTA (((${body})))"/>
            <stop id="_stop5"/>
        </route>
    </camelContext>
</beans>
